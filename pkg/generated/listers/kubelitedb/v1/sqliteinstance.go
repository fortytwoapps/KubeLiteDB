/*
Copyright Forty Two Apps.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/fortytwoapps/kubelitedb/pkg/apis/kubelitedb/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SQLiteInstanceLister helps list SQLiteInstances.
// All objects returned here must be treated as read-only.
type SQLiteInstanceLister interface {
	// List lists all SQLiteInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SQLiteInstance, err error)
	// SQLiteInstances returns an object that can list and get SQLiteInstances.
	SQLiteInstances(namespace string) SQLiteInstanceNamespaceLister
	SQLiteInstanceListerExpansion
}

// sQLiteInstanceLister implements the SQLiteInstanceLister interface.
type sQLiteInstanceLister struct {
	indexer cache.Indexer
}

// NewSQLiteInstanceLister returns a new SQLiteInstanceLister.
func NewSQLiteInstanceLister(indexer cache.Indexer) SQLiteInstanceLister {
	return &sQLiteInstanceLister{indexer: indexer}
}

// List lists all SQLiteInstances in the indexer.
func (s *sQLiteInstanceLister) List(selector labels.Selector) (ret []*v1.SQLiteInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SQLiteInstance))
	})
	return ret, err
}

// SQLiteInstances returns an object that can list and get SQLiteInstances.
func (s *sQLiteInstanceLister) SQLiteInstances(namespace string) SQLiteInstanceNamespaceLister {
	return sQLiteInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SQLiteInstanceNamespaceLister helps list and get SQLiteInstances.
// All objects returned here must be treated as read-only.
type SQLiteInstanceNamespaceLister interface {
	// List lists all SQLiteInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SQLiteInstance, err error)
	// Get retrieves the SQLiteInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SQLiteInstance, error)
	SQLiteInstanceNamespaceListerExpansion
}

// sQLiteInstanceNamespaceLister implements the SQLiteInstanceNamespaceLister
// interface.
type sQLiteInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SQLiteInstances in the indexer for a given namespace.
func (s sQLiteInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1.SQLiteInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SQLiteInstance))
	})
	return ret, err
}

// Get retrieves the SQLiteInstance from the indexer for a given namespace and name.
func (s sQLiteInstanceNamespaceLister) Get(name string) (*v1.SQLiteInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("sqliteinstance"), name)
	}
	return obj.(*v1.SQLiteInstance), nil
}
